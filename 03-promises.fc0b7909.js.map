{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAyCpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACT,IAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAe,CAAET,WAAUC,SAEjCK,EAAgBH,EAAQM,GAAgBL,EAAOK,E,GAC9CR,E,IA9CPL,EAAKc,iBAAiB,UAMtB,SAAqBC,GACnBA,EAAIC,iBAEJ,IAA8BC,EAAAF,EAAIG,cAAcC,SAA1CC,EAAwBH,EAAxBZ,MAAOgB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAEnBF,EAAQG,OAAOH,EAAMI,OACrBH,EAAOE,OAAOF,EAAKG,OACnBF,EAASC,OAAOD,EAAOE,OAEvB,IAAK,IAAIC,EAAI,EAAGA,GAAKH,EAAQG,GAAK,EAChCtB,EAAcsB,EAAGL,GACdM,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACjBuB,EAAA9B,GAAS+B,OAAOC,QACd,uBAAwCC,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M,IAGjD2B,OAAM,SAAAL,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAClBuB,EAAA9B,GAAS+B,OAAOI,QACd,sBAAqCF,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M,IAIjDe,GAASC,EAEXrB,EAAKkC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', handlerForm);\n\n/**\n * Function handles creating promices\n * @param {event} submit\n *  */\nfunction handlerForm(evt) {\n  evt.preventDefault();\n\n  let { delay, step, amount } = evt.currentTarget.elements;\n\n  delay = Number(delay.value);\n  step = Number(step.value);\n  amount = Number(amount.value);\n\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    delay += step;\n  }\n  form.reset();\n}\n\n/**\n * Function creates promices\n * @param {Number} position\n * @param {Number} delay\n * @returns\n */\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      const promiseParam = { position, delay };\n\n      shouldResolve ? resolve(promiseParam) : reject(promiseParam);\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","shouldResolve","Math","random","promiseParam","addEventListener","evt","preventDefault","_elements","currentTarget","elements","delay1","step","amount","Number","value","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.fc0b7909.js.map"}